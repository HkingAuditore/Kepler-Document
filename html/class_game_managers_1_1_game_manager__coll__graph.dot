digraph "GameManagers.GameManager"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{GameManagers.GameManager\n|+ AudioSource bgmSource\l+ int globalDistanceScaler\l+ bool isQuizEditMode\l+ Camera mainCamera\l+ List\< GameObject \>\l meshList\l+ static GameManager\l getGameManager\l+ int globalMassScaler\l|+ CameraController GetMain\lCameraController()\l+ Mesh GetMeshAndMaterials\lFromList(int index, ref\l List\< Material \> materials)\l+ void SetAudioVolume()\l+ void CalculateMassScales()\l+ void CalculateMassScales\l(double realMass)\l+ void CalculateDistanceScale()\l+ int GetK(PropertyUnit\l propertyUnit, double mass)\l+ int GetK(PropertyUnit\l propertyUnit)\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="全局管理"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{MonoBehaviour\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +quizBase" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{Quiz.QuizBase\n|+ float answer\l+ QuizType quizType\l+ QuizAstralBody target\l|# override void Start()\l# override void GenerateAstral\lBodiesWithPrefab()\l# override void GenerateAstral\lBodiesWithoutPrefab(AstralBodyData\lDictProcessHandler dataDictProcessHandler\l=null, AstralBodyDataDictProcessHandler\l afterDictProcessHandler=null)\l# override void LoadScene\l(string fileName)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_quiz_1_1_quiz_base.html",tooltip="问题管理"];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{SceneLoadBase\< QuizAstral\lBody \>\n|+ T astralBodyPrefab\l+ T core\l+ bool isLoadByPrefab\l+ UnityEvent loadDoneEvent\l+ string loadTarget\l+ GravityTracing orbitBase\l+ Transform OrbitRoot\l+ bool isLoadDone\l# List\< AstralBodyDict\l\< T \> \> astralBodiesDict\l# List\< AstralBodyDataDict\l\< T \> \> _astralBodyStructDictList\l|# delegate void AstralBody\lDataDictProcessHandler\l(T prefab, AstralBodyDataDict\l\< T \> astralBodyDataDict, List\l\< AstralBodyDict\< T \>\> astralBodyDictList)\l# virtual void Start()\l# virtual void LoadScene\l(string fileName)\l# virtual void GenerateAstral\lBodiesWithPrefab()\l# virtual void GenerateAstral\lBodiesWithoutPrefab(AstralBodyData\lDictProcessHandler dataDictProcessHandler\l=null, AstralBodyDataDictProcessHandler\l afterDictProcessHandler=null)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_xml_saver_1_1_scene_load_base.html",tooltip=" "];
  Node5 -> Node4 [dir="back",color="orange",fontsize="10",style="solid",label=" \< QuizAstralBody \>" ,fontname="Helvetica"];
  Node5 [label="{XmlSaver.SceneLoadBase\< T \>\n|+ T astralBodyPrefab\l+ T core\l+ bool isLoadByPrefab\l+ UnityEvent loadDoneEvent\l+ string loadTarget\l+ Transform OrbitRoot\l+ bool isLoadDone\l# List\< AstralBodyDict\l\< T \> \> astralBodiesDict\l# List\< AstralBodyDataDict\l\< T \> \> _astralBodyStructDictList\l|# delegate void AstralBody\lDataDictProcessHandler\l(T prefab, AstralBodyDataDict\l\< T \> astralBodyDataDict, List\l\< AstralBodyDict\< T \>\> astralBodyDictList)\l# virtual void Start()\l# virtual void LoadScene\l(string fileName)\l# virtual void GenerateAstral\lBodiesWithPrefab()\l# virtual void GenerateAstral\lBodiesWithoutPrefab(AstralBodyData\lDictProcessHandler dataDictProcessHandler\l=null, AstralBodyDataDictProcessHandler\l afterDictProcessHandler=null)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_xml_saver_1_1_scene_load_base.html",tooltip="存档加载管理"];
  Node2 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 -> Node5 [color="grey25",fontsize="10",style="solid",label=" +orbitBase" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{SpacePhysic.GravityTracing\n|+ int sample\l+ float timeScale\l+ SplineComputer splineComputer\l+ bool isFreezing\l+ bool isShowOrbit\l|+ void Awake()\l+ void Dispatch()\l+ void AddTracingTarget\l(ITraceable traceable)\l+ void Freeze(bool isFreezing)\l+ void RemoveAstralBody\l(AstralBody astralBody)\l+ ConicSection GetConicSection\l(ITraceable astralBody)\l+ void DrawMathOrbit\l(ConicSection conicSection,\l int sam)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_space_physic_1_1_gravity_tracing.html",tooltip="引力追踪"];
  Node2 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +sceneEditor" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{XmlSaver.SceneEditor\n||+ void SaveScene(string\l sceneName)\l+ void AddAstralBody\l(AstralBody astralBody,\l bool isTarget=false)\l+ void UpdateAstralBody()\l+ void RemoveAstralBodyDict\l(AstralBody astralBody)\l+ void SetCore(AstralBody\l core)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_xml_saver_1_1_scene_editor.html",tooltip="场景编辑器"];
  Node8 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{SceneLoadBase\< AstralBody \>\n|+ T astralBodyPrefab\l+ T core\l+ bool isLoadByPrefab\l+ UnityEvent loadDoneEvent\l+ string loadTarget\l+ GravityTracing orbitBase\l+ Transform OrbitRoot\l+ bool isLoadDone\l# List\< AstralBodyDict\l\< T \> \> astralBodiesDict\l# List\< AstralBodyDataDict\l\< T \> \> _astralBodyStructDictList\l|# delegate void AstralBody\lDataDictProcessHandler\l(T prefab, AstralBodyDataDict\l\< T \> astralBodyDataDict, List\l\< AstralBodyDict\< T \>\> astralBodyDictList)\l# virtual void Start()\l# virtual void LoadScene\l(string fileName)\l# virtual void GenerateAstral\lBodiesWithPrefab()\l# virtual void GenerateAstral\lBodiesWithoutPrefab(AstralBodyData\lDictProcessHandler dataDictProcessHandler\l=null, AstralBodyDataDictProcessHandler\l afterDictProcessHandler=null)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_xml_saver_1_1_scene_load_base.html",tooltip=" "];
  Node5 -> Node8 [dir="back",color="orange",fontsize="10",style="solid",label=" \< AstralBody \>" ,fontname="Helvetica"];
  Node9 -> Node7 [color="grey25",fontsize="10",style="solid",label=" +saver" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{XmlSaver.SceneSaver\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_xml_saver_1_1_scene_saver.html",tooltip="场景保存"];
  Node10 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node10 [label="{XmlSaver\< AstralBody \>\n|+ static string xmlPath\l# XmlDocument _xmlDoc\l|+ delegate void ConvertAstral\lBodyDictHandler(AstralBodyDataDict\l\< T \> astralBodyDataDict, XmlElement\l xmlElement)\l+ delegate XmlElement\l ConvertAstralBodyProperty\lToXmlHandler(AstralBodyDict\l\< T \> astralBodyDict, XmlDocument xmlDoc)\l+ delegate void ConvertAstral\lDictToXmlHandler(AstralBodyDict\l\< T \> astralBodyDict, XmlElement xmlDoc)\l+ virtual void SaveXml\l(XmlDocument doc, string\l fileName)\l+ virtual XmlDocument\l ConvertOrbit2Xml(List\l\< AstralBodyDict\< T \>\>\l astOrbit)\l+ static XmlDocument\l LoadXml(string fileName,\l string pathDirectory=null)\l+ static List\< XmlDocument\l \> GetFiles(ref List\< string\l \> fileNames, string pathDirectory=null)\l+ static void DeleteFiles\l(string sceneName, string\l pathDirectory=null)\l+ static SceneBaseStruct\l\< T \> ConvertXml2SceneBase\l(XmlDocument xmlDoc, string\l fileName, ConvertAstralBodyDictHandler\l convertDelegate=null)\l# virtual XmlElement\l ConvertAstralBody2XmlElement\l(AstralBodyDict\< T \> astralBodyDict,\l ConvertAstralBodyPropertyToXmlHandler\l convertAstralBodyPropertyToXmlHandler\l=null, ConvertAstralDictToXmlHandler convertAstral\lDictToXmlHandler=null)\l# static Vector3 ConvertString2\lVector3(string str)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_xml_saver_1_1_xml_saver.html",tooltip=" "];
  Node11 -> Node10 [dir="back",color="orange",fontsize="10",style="solid",label=" \< AstralBody \>" ,fontname="Helvetica"];
  Node11 [label="{XmlSaver.XmlSaver\< T \>\n|+ static string xmlPath\l# XmlDocument _xmlDoc\l|+ delegate void ConvertAstral\lBodyDictHandler(AstralBodyDataDict\l\< T \> astralBodyDataDict, XmlElement\l xmlElement)\l+ delegate XmlElement\l ConvertAstralBodyProperty\lToXmlHandler(AstralBodyDict\l\< T \> astralBodyDict, XmlDocument xmlDoc)\l+ delegate void ConvertAstral\lDictToXmlHandler(AstralBodyDict\l\< T \> astralBodyDict, XmlElement xmlDoc)\l+ virtual void SaveXml\l(XmlDocument doc, string\l fileName)\l+ virtual XmlDocument\l ConvertOrbit2Xml(List\l\< AstralBodyDict\< T \>\>\l astOrbit)\l+ static XmlDocument\l LoadXml(string fileName,\l string pathDirectory=null)\l+ static List\< XmlDocument\l \> GetFiles(ref List\< string\l \> fileNames, string pathDirectory=null)\l+ static void DeleteFiles\l(string sceneName, string\l pathDirectory=null)\l+ static SceneBaseStruct\l\< T \> ConvertXml2SceneBase\l(XmlDocument xmlDoc, string\l fileName, ConvertAstralBodyDictHandler\l convertDelegate=null)\l# virtual XmlElement\l ConvertAstralBody2XmlElement\l(AstralBodyDict\< T \> astralBodyDict,\l ConvertAstralBodyPropertyToXmlHandler\l convertAstralBodyPropertyToXmlHandler\l=null, ConvertAstralDictToXmlHandler convertAstral\lDictToXmlHandler=null)\l# static Vector3 ConvertString2\lVector3(string str)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_xml_saver_1_1_xml_saver.html",tooltip="存档保存"];
  Node2 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +orbit" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +satelliteChallengeManger" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 [label="{Satellite.SatelliteChallenge\lManger\n|+ float angleThreshold\l+ float checkTime\l+ bool isSuccess\l+ bool isCheckEnd\l+ SatelliteResultType\l satelliteResultType\l|+ void CallCheck()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_satellite_1_1_satellite_challenge_manger.html",tooltip="航天挑战管理"];
  Node2 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node13 -> Node12 [color="grey25",fontsize="10",style="solid",label=" +target" ,arrowhead="odiamond",fontname="Helvetica"];
  Node13 [label="{SpacePhysic.AstralBody\n|+ List\< AstralBody \>\l affectedPlanets\l+ float affectRadius\l+ Vector3 angularVelocity\l+ List\< AstralBody \>\l banAffectedPlanets\l+ SphereCollider defaultCollider\l+ bool enableAffect\l+ bool enableTracing\l+ Vector3 oriVelocity\l+ SphereCollider triggerCollider\l+ UnityEvent\< Vector3\l \> velocityChangedEvent\l+ float? Mass\l+ Rigidbody astralBodyRigidbody\l+ Vector3 Force\l+ float gravity\l+ int meshNum\l+ float size\l+ double realMass\l+ double density\l+ Vector3 lastVelocity\l+ bool isLoadDone\l|+ virtual void OnCollision\lEnter(Collision other)\l+ Transform GetTransform()\l+ Vector3 GetPosition()\l+ GameObject GetGameObject()\l+ bool GetEnableTracing()\l+ virtual float GetMass()\l+ Rigidbody GetRigidbody()\l+ Vector3 GetVelocity()\l+ List\< AstralBody \>\l GetAffectedPlanets()\l+ AstralBody GetAstralBody()\l+ void ChangeVelocity\l(Vector3 velocity)\l+ void ChangeVelocity\l(double realSpeed)\l+ Vector3 CalculateForce()\l+ void SetCircleVelocity()\l+ void SetCircleVelocityMenu()\l# virtual void Start()\l# void Generate()\l# virtual void FixedUpdate()\l# virtual void SetMass()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_space_physic_1_1_astral_body.html",tooltip="星体物理实体"];
  Node2 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node14 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node14 [label="{ITraceable\n||+ Transform GetTransform()\l+ Vector3 GetPosition()\l+ GameObject GetGameObject()\l+ bool GetEnableTracing()\l+ float GetMass()\l+ Rigidbody GetRigidbody()\l+ Vector3 GetVelocity()\l+ List\< AstralBody \>\l GetAffectedPlanets()\l+ AstralBody GetAstralBody()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interface_space_physic_1_1_i_traceable.html",tooltip="可追踪接口"];
  Node15 -> Node12 [color="grey25",fontsize="10",style="solid",label=" +satellite" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 [label="{Satellite.Satellite\n|+ List\< SatellitePart\l \> satelliteParts\l|+ float GetMass()\l+ Transform GetTransform()\l+ Vector3 GetVelocity()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_satellite_1_1_satellite.html",tooltip="卫星整体"];
  Node2 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node16 -> Node15 [color="grey25",fontsize="10",style="solid",label=" +satelliteCore" ,arrowhead="odiamond",fontname="Helvetica"];
  Node16 [label="{Satellite.SatelliteCore\n||+ override float GetMass()\l# void Awake()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_satellite_1_1_satellite_core.html",tooltip="卫星核心"];
  Node17 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node17 [label="{SatelliteEngine\n|+ int engineStage\l|+ void SetCurDirVelocity\l(float speed)\l# void Awake()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_satellite_1_1_satellite_engine.html",tooltip="卫星引擎"];
  Node18 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node18 [label="{SatellitePart\n|+ List\< SatellitePart\l \> connectedPartList\l+ string satelliteName\l+ SatelliteType PartType\l|+ void Push(Vector3 dir)\l+ void Rotate(Vector3 dir)\l+ void GenerateJoint()\l+ void GetPartName()\l+ void Separate(string\l partName)\l+ void Separate(bool\l separateAll)\l# override void SetMass()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_satellite_1_1_satellite_part.html",tooltip="卫星部件"];
  Node19 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node19 [label="{AstralBody\n|+ List\< AstralBody \>\l affectedPlanets\l+ float affectRadius\l+ Vector3 angularVelocity\l+ List\< AstralBody \>\l banAffectedPlanets\l+ SphereCollider defaultCollider\l+ bool enableAffect\l+ bool enableTracing\l+ Vector3 oriVelocity\l+ SphereCollider triggerCollider\l+ UnityEvent\< Vector3\l \> velocityChangedEvent\l+ float? Mass\l+ Rigidbody astralBodyRigidbody\l+ Vector3 Force\l+ float gravity\l+ int meshNum\l+ float size\l+ double realMass\l+ double density\l+ Vector3 lastVelocity\l+ bool isLoadDone\l|+ virtual void OnCollision\lEnter(Collision other)\l+ Transform GetTransform()\l+ Vector3 GetPosition()\l+ GameObject GetGameObject()\l+ bool GetEnableTracing()\l+ virtual float GetMass()\l+ Rigidbody GetRigidbody()\l+ Vector3 GetVelocity()\l+ List\< AstralBody \>\l GetAffectedPlanets()\l+ AstralBody GetAstralBody()\l+ void ChangeVelocity\l(Vector3 velocity)\l+ void ChangeVelocity\l(double realSpeed)\l+ Vector3 CalculateForce()\l+ void SetCircleVelocity()\l+ void SetCircleVelocityMenu()\l# virtual void Start()\l# void Generate()\l# virtual void FixedUpdate()\l# virtual void SetMass()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_space_physic_1_1_astral_body.html",tooltip="星体物理实体"];
  Node2 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node14 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node15 -> Node16 [color="grey25",fontsize="10",style="solid",label=" +satellite" ,arrowhead="odiamond",fontname="Helvetica"];
  Node20 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +globalTimer" ,arrowhead="odiamond",fontname="Helvetica"];
  Node20 [label="{GameManagers.GlobalTimer\n|+ float countDownTime\l+ UnityEvent countingDownEnd\lEvent\l+ UnityEvent countingDownEvent\l+ UnityEvent startCountDown\lEvent\l+ bool isPausing\l+ bool isCountDownEnd\l+ bool isCountingDown\l+ float timer\l|+ void Reset()\l+ void StartCounting()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_game_managers_1_1_global_timer.html",tooltip="全局计时器"];
  Node2 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
}
