digraph "Quiz.QuizAstralBody"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Quiz.QuizAstralBody\n|+ float globalAngularVelocity\l+ bool isAnglePerTPublic\l+ bool isAngularVelocityPublic\l+ bool isDistancePerTPublic\l+ bool isGravityPublic\l+ bool isMassPublic\l+ bool isPeriodPublic\l+ bool isRadiusPublic\l+ bool isSizePublic\l+ bool isTPublic\l+ bool isVelocityPublic\l+ float period\l+ float radius\l+ float anglePerT\l+ float distancePerT\l+ float t\l+ float oriRadius\l|+ void UpdateQuizAstralBody()\l+ void UpdateHighCost()\l+ void UpdateQuizAstralBody\lPer()\l+ string GetQuizConditionString()\l+ bool CheckPublicity()\l# override void Start()\l# override void FixedUpdate()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="问题中的星体"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{AstralBody\n|+ List\< AstralBody \>\l affectedPlanets\l+ float affectRadius\l+ Vector3 angularVelocity\l+ List\< AstralBody \>\l banAffectedPlanets\l+ SphereCollider defaultCollider\l+ bool enableAffect\l+ bool enableTracing\l+ Vector3 oriVelocity\l+ SphereCollider triggerCollider\l+ UnityEvent\< Vector3\l \> velocityChangedEvent\l+ UnityEvent astralBodyDestroy\lEvent\l+ bool isUseScaler\l+ float? Mass\l+ Rigidbody astralBodyRigidbody\l+ Vector3 Force\l+ float gravity\l+ int meshNum\l+ float size\l+ double realMass\l+ double density\l+ Vector3 lastVelocity\l+ bool isLoadDone\l|+ virtual void OnCollision\lEnter(Collision other)\l+ Transform GetTransform()\l+ Vector3 GetPosition()\l+ GameObject GetGameObject()\l+ bool GetEnableTracing()\l+ virtual float GetMass()\l+ Rigidbody GetRigidbody()\l+ Vector3 GetVelocity()\l+ List\< AstralBody \>\l GetAffectedPlanets()\l+ AstralBody GetAstralBody()\l+ void ChangeVelocity\l(Vector3 velocity)\l+ void ChangeVelocity\l(double realSpeed)\l+ Vector3 CalculateForce()\l+ void SetCircleVelocity()\l+ void SetCircleVelocityMenu()\l# virtual void Start()\l# void Generate()\l# virtual void FixedUpdate()\l# virtual void SetMass()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_space_physic_1_1_astral_body.html",tooltip="星体物理实体"];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{MonoBehaviour\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node4 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{ITraceable\n||+ Transform GetTransform()\l+ Vector3 GetPosition()\l+ GameObject GetGameObject()\l+ bool GetEnableTracing()\l+ float GetMass()\l+ Rigidbody GetRigidbody()\l+ Vector3 GetVelocity()\l+ List\< AstralBody \>\l GetAffectedPlanets()\l+ AstralBody GetAstralBody()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interface_space_physic_1_1_i_traceable.html",tooltip="可追踪接口"];
}
